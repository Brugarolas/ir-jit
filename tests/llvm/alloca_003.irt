--TEST--
003: BLOCK_BEGIN/BLOCK_END
--ARGS--
--emit-llvm
--CODE--
func test(int32_t, uintptr_t): void
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	int32_t c_4 = 4;
	int32_t c_5 = 1;
	int32_t c_6 = 0;
	l_1 = START(l_12);
	int32_t d_2 = PARAM(l_1, "arg_1", 1);
	uintptr_t d_3 = PARAM(l_1, "arg_2", 2);
	int32_t d_4 = MUL(d_2, c_4);
	l_5 = END(l_1);
	l_6 = LOOP_BEGIN(l_5, l_20);
	int32_t d_7 = PHI(l_6, c_6, d_19);
	int32_t d_8 = PHI(l_6, c_6, d_17);
	bool d_9 = LT(d_7, d_2);
	l_10 = IF(l_6, d_9);
	l_11 = IF_FALSE(l_10);
	l_12 = RETURN(l_11, null);
	l_13 = IF_TRUE(l_10);
	uintptr_t d_14, l_14 = BLOCK_BEGIN(l_13);
	uintptr_t d_15, l_15 = ALLOCA(l_14, d_4);
	int32_t d_16, l_16 = CALL/1(l_15, d_3, d_15);
	int32_t d_17 = ADD(d_16, d_8);
	l_18 = BLOCK_END(l_16, d_14);
	int32_t d_19 = ADD(d_7, c_5);
	l_20 = LOOP_END(l_18);
}
--EXPECT--
define void @test(i32 %d2, ptr %d3)
{
l1:
	%d4 = mul i32 %d2, 4
	br label %l2
l4:
	%d14 = 	call ptr @llvm.stacksave()
	%d15 = alloca i8, i32 %d4, align 16
	%d16 = call i32 %d3(ptr %d15)
	%d17 = add i32 %d16, %d8
	call void @llvm.stackrestore(ptr %d14)
	%d19 = add i32 %d7, 1
	br label %l2
l2:
	%d7 = phi i32 [0, %l1], [%d19, %l4]
	%d8 = phi i32 [0, %l1], [%d17, %l4]
	%d9 = icmp slt i32 %d7, %d2
	br i1 %d9, label %l4, label %l3
l3:
	ret void
}
declare ptr @llvm.stacksave()
declare void @llvm.stackrestore(ptr)
