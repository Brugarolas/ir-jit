--TEST--
003: BLOCK_BEGIN/BLOCK_END
--TARGET--
x86
--ARGS--
-S
--CODE--
func test(int32_t, uintptr_t): void
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	int32_t c_4 = 4;
	int32_t c_5 = 1;
	int32_t c_6 = 0;
	l_1 = START(l_12);
	int32_t d_2 = PARAM(l_1, "arg_1", 1);
	uintptr_t d_3 = PARAM(l_1, "arg_2", 2);
	int32_t d_4 = MUL(d_2, c_4);
	l_5 = END(l_1);
	l_6 = LOOP_BEGIN(l_5, l_20);
	int32_t d_7 = PHI(l_6, c_6, d_19);
	int32_t d_8 = PHI(l_6, c_6, d_17);
	bool d_9 = LT(d_7, d_2);
	l_10 = IF(l_6, d_9);
	l_11 = IF_FALSE(l_10);
	l_12 = RETURN(l_11, null);
	l_13 = IF_TRUE(l_10);
	uintptr_t d_14, l_14 = BLOCK_BEGIN(l_13);
	uintptr_t d_15, l_15 = ALLOCA(l_14, d_4);
	int32_t d_16, l_16 = CALL/1(l_15, d_3, d_15);
	int32_t d_17 = ADD(d_16, d_8);
	l_18 = BLOCK_END(l_16, d_14);
	int32_t d_19 = ADD(d_7, c_5);
	l_20 = LOOP_END(l_18);
}
--EXPECT--
test:
	pushl %ebp
	movl %esp, %ebp
	pushl %ebx
	pushl %esi
	pushl %edi
	subl $0xc, %esp
	movl 0xc(%ebp), %esi
	movl 8(%ebp), %ebx
	leal (, %ebx, 4), %edi
	movl $0, -0x14(%ebp)
	movl $0, -0x10(%ebp)
	jmp .L2
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
.L1:
	movl %esp, %ebx
	movl %edi, %eax
	addl $0xf, %eax
	andl $0xfffffff0, %eax
	subl %eax, %esp
	movl %esp, %eax
	subl $0x10, %esp
	movl %eax, (%esp)
	calll *%esi
	addl $0x10, %esp
	movl -0x10(%ebp), %ecx
	addl %eax, %ecx
	movl %ecx, -0x10(%ebp)
	movl %ebx, %esp
	movl -0x14(%ebp), %eax
	leal 1(%eax), %eax
	movl %eax, -0x14(%ebp)
.L2:
	movl -0x14(%ebp), %ecx
	cmpl 8(%ebp), %ecx
	jl .L1
	leal -0xc(%ebp), %esp
	popl %edi
	popl %esi
	popl %ebx
	popl %ebp
	retl
