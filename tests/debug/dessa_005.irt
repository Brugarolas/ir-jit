--TEST--
DESSA 005 (swap & tmp register)
--TARGET--
x86_64
--ARGS--
-S
--CODE--
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	uintptr_t c_4 = func printf(uintptr_t, ...): void;
	uintptr_t c_5 = "%g %g %g %g %g\n";
	l_1 = START(l_21);
	double d_2 = PARAM(l_1, "arg_1", 1);
	double d_3 = PARAM(l_1, "arg_2", 2);
	double d_4 = PARAM(l_1, "arg_3", 3);
	double d_5 = PARAM(l_1, "arg_4", 4);
	double d_6 = PARAM(l_1, "arg_5", 5);
	bool d_7 = PARAM(l_1, "cond", 6);
	l_8 = END(l_1);
	l_9 = LOOP_BEGIN(l_8, l_16);
	double d_10 = PHI(l_9, d_3, d_2);
	double d_11 = PHI(l_9, d_4, d_10);
	double d_12 = PHI(l_9, d_5, d_13);
	double d_13 = PHI(l_9, d_6, d_12);
	l_14 = IF(l_9, d_7);
	l_15 = IF_TRUE(l_14);
	l_16 = LOOP_END(l_15);
	l_17 = IF_FALSE(l_14);
	l_18 = CALL/6(l_17, c_4, c_5, d_2, d_10, d_11, d_12, d_13);
	l_21 = RETURN(l_18, null);
}
--EXPECT--
test:
	subq $8, %rsp
.L1:
	testb %dil, %dil
	je .L2
	movapd %xmm3, %xmm2
	movapd %xmm4, %xmm3
	movapd %xmm2, %xmm4
	movapd %xmm1, %xmm2
	movapd %xmm0, %xmm1
	jmp .L1
.L2:
	leaq .L3(%rip), %rdi
	movl $5, %eax
	callq printf
	addq $8, %rsp
	retq
.rodata
	.db 0x90, 0x90, 0x90
.L3:
	.db 0x25, 0x67, 0x20, 0x25, 0x67, 0x20, 0x25, 0x67, 0x20, 0x25, 0x67, 0x20, 0x25, 0x67, 0x0a, 0x00
