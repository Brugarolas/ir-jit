--TEST--
006: CFG for simple loop (Figure 1 from "Global Code Motion Global Value Numbering" by Cliff Click)
--ARGS--
--dump-cfg --dump-after-gcm
--CODE--
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	int32_t c_4 = 10;
	int32_t c_5 = 2;
	int32_t c_6 = 1;
	int32_t c_7 = 0;
	l_1 = START(l_14);
	int32_t d_2 = PARAM(l_1, "x", 0);
	l_3 = END(l_1);
	l_4 = LOOP_BEGIN(l_3, l_12);
	int32_t d_5 = PHI(l_4, c_7, d_7);
	int32_t d_6 = ADD(d_2, c_6);
	int32_t d_7 = ADD(d_6, d_5);
	int32_t d_8 = MUL(d_7, c_5);
	bool d_9 = LT(d_7, c_4);
	l_10 = IF(l_4, d_9);
	l_11 = IF_TRUE(l_10);
	l_12 = LOOP_END(l_11);
	l_13 = IF_FALSE(l_10);
	l_14 = RETURN(l_13, d_8);
}
--EXPECT--
{ # CFG
BB1:
	start=1
	end=3
	successors(1) [BB2]
	dom_depth=0
	dom_children [BB2]
BB2:
	start=4
	end=10
	successors(2) [BB3, BB4]
	predecessors(2) [BB1, BB3]
	dom_parent=BB1
	dom_depth=1
	dom_children [BB3, BB4]
	LOOP_HEADER
	loop_depth=1
BB3:
	start=11
	end=12
	successors(1) [BB2]
	predecessors(1) [BB2]
	dom_parent=BB2
	dom_depth=2
	loop_header=BB2
	loop_depth=1
BB4:
	start=13
	end=14
	predecessors(1) [BB2]
	dom_parent=BB2
	dom_depth=2
}
