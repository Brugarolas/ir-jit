static func iterate(double, double): int32_t
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	double c_4 = 0.5;
	double c_5 = 0;
	int32_t c_6 = 0;
	int32_t c_7 = 1;
	double c_8 = 16;
	int32_t c_9 = 1000;
	l_1 = START(l_31);
	double d_2 = PARAM(l_1, "x", 1);
	double d_3 = PARAM(l_1, "y", 2);
	double d_4 = SUB(d_3, c_4);
	double d_5 = COPY(d_2);
	double d_6 = COPY(c_5);
	double d_7 = COPY(c_5);
	int32_t d_8 = COPY(c_6);
	l_9 = END(l_1);
	l_10 = LOOP_BEGIN(l_9, l_33);
	double d_11 = PHI(l_10, d_6, d_21);
	double d_12 = PHI(l_10, d_7, d_19);
	int32_t d_13 = PHI(l_10, d_8, d_14);
	int32_t d_14 = ADD(d_13, c_7);
	double d_15 = MUL(d_12, d_11);
	double d_16 = MUL(d_12, d_12);
	double d_17 = MUL(d_11, d_11);
	double d_18 = SUB(d_16, d_17);
	double d_19 = ADD(d_18, d_4);
	double d_20 = ADD(d_15, d_15);
	double d_21 = ADD(d_20, d_5);
	double d_22 = ADD(d_17, d_16);
	bool d_23 = GT(d_22, c_8);
	l_24 = IF(l_10, d_23);
	l_25 = IF_TRUE(l_24);
	l_26 = RETURN(l_25, d_14);
	l_27 = IF_FALSE(l_24);
	bool d_28 = GT(d_14, c_9);
	l_29 = IF(l_27, d_28);
	l_30 = IF_TRUE(l_29);
	l_31 = RETURN(l_30, c_6, l_26);
	l_32 = IF_FALSE(l_29);
	l_33 = LOOP_END(l_32);
}
func mandelbrot(): void
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	int32_t c_4 = 16;
	int32_t c_5 = 1;
	uintptr_t c_6 = func gettimeofday(uintptr_t, uintptr_t): int32_t;
	uintptr_t c_7 = 0x8;
	int32_t c_8 = 10;
	uintptr_t c_9 = func putchar(int32_t): int32_t;
	double c_10 = 40;
	uintptr_t c_11 = func iterate(double, double): int32_t;
	int32_t c_12 = 0;
	int32_t c_13 = 32;
	int32_t c_14 = 42;
	int32_t c_15 = 39;
	double c_16 = 1e+06;
	uintptr_t c_17 = "C Elapsed %0.3f\n";
	uintptr_t c_18 = func printf(uintptr_t, ...): int32_t;
	int32_t c_19 = -39;
	l_1 = START(l_49);
	uintptr_t d_2, l_2 = ALLOCA(l_1, c_4);
	int32_t d_3, l_3 = CALL/2(l_2, c_6, d_2, c_1);
	int64_t d_5, l_5 = LOAD(l_3, d_2);
	uintptr_t d_6 = ADD(d_2, c_7);
	int64_t d_7, l_7 = LOAD(l_5, d_6);
	l_8 = END(l_7);
	l_9 = LOOP_BEGIN(l_8, l_34);
	int32_t d_10 = PHI(l_9, c_19, d_30);
	int32_t d_11, l_11 = CALL/1(l_9, c_9, c_8);
	double d_12 = INT2FP(d_10);
	double d_13 = DIV(d_12, c_10);
	l_14 = END(l_11);
	l_15 = LOOP_BEGIN(l_14, l_28);
	int32_t d_16 = PHI(l_15, c_19, d_24);
	double d_17 = INT2FP(d_16);
	double d_18 = DIV(d_17, c_10);
	int32_t d_19, l_19 = CALL/2(l_15, c_11, d_18, d_13);
	bool d_21 = EQ(d_19, c_12);
	int32_t d_22 = COND(d_21, c_14, c_13);
	int32_t d_23, l_23 = CALL/1(l_19, c_9, d_22);
	int32_t d_24 = ADD(d_16, c_5);
	bool d_25 = EQ(d_24, c_15);
	l_26 = IF(l_23, d_25);
	l_27 = IF_FALSE(l_26);
	l_28 = LOOP_END(l_27);
	l_29 = IF_TRUE(l_26);
	int32_t d_30 = ADD(d_10, c_5);
	bool d_31 = EQ(d_30, c_15);
	l_32 = IF(l_29, d_31);
	l_33 = IF_FALSE(l_32);
	l_34 = LOOP_END(l_33);
	l_35 = IF_TRUE(l_32);
	int32_t d_36, l_36 = CALL/1(l_35, c_9, c_8);
	int32_t d_37, l_37 = CALL/2(l_36, c_6, d_2, c_1);
	int64_t d_39, l_39 = LOAD(l_37, d_2);
	int64_t d_40 = SUB(d_39, d_5);
	double d_41 = INT2FP(d_40);
	int64_t d_42, l_42 = LOAD(l_39, d_6);
	int64_t d_43 = SUB(d_42, d_7);
	double d_44 = INT2FP(d_43);
	double d_45 = DIV(d_44, c_16);
	double d_46 = ADD(d_45, d_41);
	int32_t d_47, l_47 = CALL/2(l_42, c_18, c_17, d_46);
	l_49 = RETURN(l_47, null);
}
func main(int32_t, uintptr_t): int32_t
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	uintptr_t c_4 = func mandelbrot(): void;
	int32_t c_5 = 0;
	l_1 = START(l_6);
	int32_t d_2 = PARAM(l_1, "arg_1", 1);
	uintptr_t d_3 = PARAM(l_1, "arg_2", 2);
	l_4 = CALL(l_1, c_4);
	l_5 = CALL(l_4, c_4);
	l_6 = RETURN(l_5, c_5);
}
